#! /usr/bin/env node
var Docker = require('dockerode-promise');
var Capacity = require('../capacity');
var Consumer = require('../ironmq_consumer');
var program = require('commander');
var os = require('os');
var dockerOpts = require('dockerode-options');
var debug = require('debug')('taskcluster-docker-worker:cli');

// one GB in bytes
var DEFAULT_RAM_PER_WORKER = 1073741824;
// default interval to poll for more work when not at capcity (5s)
var DEFAULT_INTERVAL = 5000;

/**
Determine the overall capacity of the worker based on the RAM of this machine.

XXX: This has a major flaw of getting available memory from the node process
     instead of the docker host which may be on a different machine in the
     future.
*/
function determineCapacity(perWorker) {
  // free memory on startup conditions _should_ be a decent guess as to how
  // many parallel tasks we can run. We always need at least one.
  return Math.max(Math.ceil(os.freemem() / perWorker), 1);
}

function startWorker(queue, cmd) {
  var capacity = new Capacity(cmd.capacity || determineCapacity(cmd.memory));

  var consumer = new Consumer({
    capacity: capacity,
    docker: new Docker(dockerOpts()),
    queue: queue,
    interval: parseInt(cmd.interval, 10)
  });

  console.log(
    'starting worker with %s parallel tasks polling at %s ms intervals',
    capacity.maximumSize,
    consumer.interval
  );

  consumer.poll();
}

program.
  version(require('../package.json').version).
  command('start <queue>').
  option('-m, --memory <value>', 'memory per task in bytes', DEFAULT_RAM_PER_WORKER).
  option('-i, --interval <value>', 'interval to poll for new work when not at capcity in ms', DEFAULT_INTERVAL).
  option('-c, --capacity <value>', 'override all other capacity options').
  description('bind worker to a particular amqp queue').
  action(startWorker);

program.parse(process.argv);
