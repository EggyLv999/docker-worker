var docker = require('../test/docker')();
var DockerProc = require('../');
var subject = new DockerProc(docker, {
  create: {
    Image: 'lightsofapollo/gaia-prebuilt',
    Cmd: [' ./bin/gaia-marionette', './apps/gallery/test/marionette/fullscreen_image_test.js'],
    Tty: true
  },
  start: {}
});

var TOP_MAP = {
  USER: 'user',
  PID: 'pid',
  '%CPU': 'cpu',
  '%MEM': 'memory',
  RSS: 'rss',
  START: 'start',
  TIME: 'time',
  COMMAND: 'command'
};

var nameToIndex;

function buildIndex(titles) {
  var result = {};
  titles.forEach(function(key, idx) {
    if (!(key in TOP_MAP)) return;
    result[idx] = TOP_MAP[key];
  });
  return result;
}

function format(top) {
  var values = [];
  nameToIndex = nameToIndex || buildIndex(top.Titles);

  top.Processes.forEach(function(process) {
    var formatted = {};
    process.forEach(function(name, idx) {
      if (!nameToIndex[idx]) return;
      formatted[nameToIndex[idx]] = name;
    });
    values.push(formatted);
  });

  return values;
}

var finished = false;

subject.once('container', function(container) {
  function pollTop() {
    container.top({ ps_args: ['aux'] }).then(
      function(value) {
        if (finished) return;
        console.log(value);
        //console.log(format(value));
        setTimeout(pollTop, 500);
      },
      function(err) {
        if (!finished) {
          pollTop();
        }
      }
    );
  }

  pollTop();
});

subject.run().then(
  function(exit) {
    finished = true;
    console.log('exit code', exit);
  },
  function(err) {
    console.log(err.stack);
  }
);
